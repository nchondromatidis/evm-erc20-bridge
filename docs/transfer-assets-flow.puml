@startuml
participant "UserA \n Account" as UA
participant "Bridge \n Service" as B
participant "Solver \n Service" as S
participant ChainA as CA
participant ChainB as CB

== Bridge Tasks ==
B -> B: init: sync balance for a specific block (blockA)
B -> B: init: listen event //ERC20.Transfer// users from blockA to latest
note left
Event handlers will update user balances
end note


== Transfer Flow ==
note across
transfer object (to)
 {
     sender: UserA,
     token: { address: TokenA, amount: 100 },
     targetChain: { chainId: ChainB, receiver: UserB},
     refund: { chainId: ChainA, tx: <transfer 100 TokenA to bridge account [ignore fees]>, signedTx: <signed tx> },
     signature: String,
 }
end note

UA -> B: send singed //transfer object//
B -> B: persist **RECEIVED** & transfer object

group Transfer Object Validation:
B -> B : check if transaction object already exists
B -> CA: check amount //db.userA.chainA.balance - db.userA.balance.lockedAmount// >= 100 TokenA
B -> CA: verify //to.refund.tx// [skipped]
B -> B: check signature //to.refund.signedTx//
B -> B: sign message
B -> B: persist: **TRANSFER_OBJECT_VALIDATED** & //db.userA.to.signature// & //db.userA.balance.lockedAmount//
end

group Cross Chain Transfer
B -> S: request transfer (interface)

group Relay to Solver [not the focus of the exercise]:
S -> S: validate signatures
note left: requested by exercise
S -> CB: **transfer**: 100 TokenA from Solver Account to UserB Account (on behalf of UserA)
note left: we assume infinite solver funds
S -> CB: wait: finality
end

B -> S: periodically request finality (interface)
B -> B: persist **TARGET_CHAIN_TRANSFER_FINALIZED** & remove to amount to //db.userA.balance.lockedAmount//

group Refund Solver Account [he could approve]:
B -> CA: **execute**: to.refund.signedTx
note right: ignore crash safety
B -> B: persist **SOURCE_CHAIN_TRANSFER_FINALIZED**
end

end

@enduml
